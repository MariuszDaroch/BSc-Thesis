# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'InterfacesVlanEdit.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets

from Error import Ui_Error


class Ui_InterfacesVlanEdit:
    InterfacesVlanEdit = None
    PrevWindow = None
    dev = None
    switch = None
    """
        [0]-vlan list by name
        [x][0]-Vlan name
        [x][1]-Vlan ID
    """
    vlans = None
    """
       [x][0]-name
       [x][1]-interface-mode
       [x][2][]=members
    """
    data = None
    tmp = []
    interface = None

    def reload(self):
        try:
            for i in self.data[int(self.interface)][2]:
                if i == "all":
                    for j in self.vlans[0]:
                        self.selectedZonesList.addItem(j)
                        self.tmp.append(j)
                    self.allZonesList.clear()
                else:
                    if i != "None":
                        self.tmp.append(i)
                        self.selectedZonesList.addItem(i)
            self.allZonesList.addItems(set(self.vlans[0]) - set(self.tmp))
            self.mode.setCurrentText(self.data[int(self.interface)][1])
        except Exception as e:
            self.openErrorWindow(e)

    def delete(self):
        try:
            self.switch.load_merge_candidate(
                config="delete interfaces " + self.data[int(self.interface)][0] + " unit 0 family ethernet-switching")
        except Exception as e:
            self.openErrorWindow(e)

    def commit(self):
        try:
            if self.mode.currentText() == 'None' and len(self.tmp) != 0:
                self.reload()
            if self.mode.currentText() == 'None' and len(self.tmp) == 0:
                self.delete()
                self.switch.load_merge_candidate(
                    config="set interfaces " + self.data[int(self.interface)][0] + " unit 0 family ethernet-switching")
            if self.mode.currentText() == 'access' and len(self.tmp) == 0:
                self.delete()
                self.switch.load_merge_candidate(
                    config="set interfaces " + self.data[int(self.interface)][0] + \
                           " unit 0 family ethernet-switching interface-mode access")
            if self.mode.currentText() == 'access' and len(self.tmp) == 1:
                self.delete()
                self.switch.load_merge_candidate(
                    config="set interfaces " + self.data[int(self.interface)][0] + \
                           " unit 0 family ethernet-switching interface-mode access vlan members " + self.tmp[0])
            if self.mode.currentText() == 'access' and len(self.tmp) > 1:
                self.reload()
            if self.mode.currentText() == 'trunk' and len(self.tmp) == 0:
                self.delete()
                self.switch.load_merge_candidate(
                    config="set interfaces " + self.data[int(self.interface)][0] + \
                           " unit 0 family ethernet-switching interface-mode trunk")
            if self.mode.currentText() == 'trunk' and len(self.tmp) != 0:
                self.delete()
                conf = "[ "
                for i in self.tmp:
                    conf = conf + i + " "
                conf = conf + "]"
                self.switch.load_merge_candidate(
                    config="set interfaces " + self.data[int(self.interface)][0] + \
                           " unit 0 family ethernet-switching interface-mode trunk vlan members " + conf)
            self.switch.commit_config()
            self.exit()
        except Exception as e:
            self.openErrorWindow(e)

    def dragAllRight(self):
        try:
            if self.mode.currentText() == "trunk":
                for i in range(self.allZonesList.count()):
                    interface = self.allZonesList.takeItem(0)
                    self.selectedZonesList.addItem(interface)
                    self.tmp.append(interface.text())
            if self.mode.currentText() == "access":
                if len(self.tmp) == 0 and len(self.allZonesList) == 1:
                    for i in range(self.allZonesList.count()):
                        interface = self.allZonesList.takeItem(0)
                        self.selectedZonesList.addItem(interface)
                        self.tmp.append(interface.text())
        except Exception as e:
            self.openErrorWindow(e)

    def dragOneRight(self):
        if self.mode.currentText() == "trunk":
            if len(self.allZonesList) > 0:
                try:
                    row = self.allZonesList.currentRow()
                    rowItem = self.allZonesList.takeItem(row)
                    self.selectedZonesList.addItem(rowItem)
                    self.tmp.append(rowItem.text())
                except Exception as e:
                    self.openErrorWindow(e)

        if self.mode.currentText() == "access":
            if len(self.allZonesList) > 0:
                if len(self.tmp) == 0:
                    try:
                        row = self.allZonesList.currentRow()
                        rowItem = self.allZonesList.takeItem(row)
                        self.selectedZonesList.addItem(rowItem)
                        self.tmp.append(rowItem.text())
                    except Exception as e:
                        self.openErrorWindow(e)

    def dragOneLeft(self):
        if len(self.selectedZonesList) > 0:
            try:
                row = self.selectedZonesList.currentRow()
                rowItem = self.selectedZonesList.takeItem(row)
                self.allZonesList.addItem(rowItem)
                self.tmp.remove(rowItem.text())
            except Exception as e:
                self.openErrorWindow(e)

    def dragAllLeft(self):
        try:
            for i in range(self.selectedZonesList.count()):
                self.allZonesList.addItem(self.selectedZonesList.takeItem(0))
            self.tmp.clear()
        except Exception as e:
            self.openErrorWindow(e)

    def exit(self):
        self.PrevWindow.show()
        self.centralwidget.window().close()

    def openErrorWindow(self, txt):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Error()
        self.ui.setupUi(self.window, self.InterfacesVlanEdit)
        self.ui.reload(txt)
        self.window.show()

    def setupUi(self, InterfacesVlanEdit, PrevWindow):
        self.PrevWindow = PrevWindow
        self.PrevWindow.hide()
        self.InterfacesVlanEdit = InterfacesVlanEdit

        InterfacesVlanEdit.setObjectName("InterfacesVlanEdit")
        InterfacesVlanEdit.resize(360, 270)
        InterfacesVlanEdit.setMinimumSize(QtCore.QSize(360, 270))
        InterfacesVlanEdit.setMaximumSize(QtCore.QSize(360, 270))

        self.centralwidget = QtWidgets.QWidget(InterfacesVlanEdit)
        self.centralwidget.setObjectName("centralwidget")

        self.allZonesList = QtWidgets.QListWidget(self.centralwidget)
        self.allZonesList.setGeometry(QtCore.QRect(20, 30, 101, 151))
        self.allZonesList.setObjectName("allZonesList")

        self.dragOneRightBrn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.dragOneRight())
        self.dragOneRightBrn.setGeometry(QtCore.QRect(140, 90, 75, 23))
        self.dragOneRightBrn.setObjectName("dragOneRightBrn")

        self.dragOneLeftBrn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.dragOneLeft())
        self.dragOneLeftBrn.setGeometry(QtCore.QRect(140, 120, 75, 23))
        self.dragOneLeftBrn.setObjectName("dragOneLeftBrn")

        self.mode = QtWidgets.QComboBox(self.centralwidget)
        self.mode.setGeometry(QtCore.QRect(140, 30, 71, 22))
        self.mode.setEditable(False)
        self.mode.setObjectName("mode")
        self.mode.addItem("")
        self.mode.addItem("")
        self.mode.addItem("")

        self.selectedZonesList = QtWidgets.QListWidget(self.centralwidget)
        self.selectedZonesList.setGeometry(QtCore.QRect(230, 30, 101, 151))
        self.selectedZonesList.setObjectName("selectedZonesList")

        self.exitBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.exit())
        self.exitBtn.setGeometry(QtCore.QRect(70, 200, 75, 23))
        self.exitBtn.setObjectName("exitBtn")

        self.commitBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.commit())
        self.commitBtn.setGeometry(QtCore.QRect(210, 200, 75, 23))
        self.commitBtn.setObjectName("commitBtn")

        self.dragAllRightBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.dragAllRight())
        self.dragAllRightBtn.setGeometry(QtCore.QRect(140, 60, 75, 23))
        self.dragAllRightBtn.setObjectName("dragAllRightBtn")

        self.dragAllLeftBtn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.dragAllLeft())
        self.dragAllLeftBtn.setGeometry(QtCore.QRect(140, 150, 75, 23))
        self.dragAllLeftBtn.setObjectName("dragAllLeftBtn")
        InterfacesVlanEdit.setCentralWidget(self.centralwidget)

        self.retranslateUi(InterfacesVlanEdit)
        QtCore.QMetaObject.connectSlotsByName(InterfacesVlanEdit)

    def retranslateUi(self, InterfacesVlanEdit):
        _translate = QtCore.QCoreApplication.translate
        InterfacesVlanEdit.setWindowTitle(_translate("InterfacesVlanEdit", "PyNet"))
        self.dragOneRightBrn.setText(_translate("InterfacesVlanEdit", ">"))
        self.dragOneLeftBrn.setText(_translate("InterfacesVlanEdit", "<"))
        self.mode.setItemText(0, _translate("InterfacesVlanEdit", "None"))
        self.mode.setItemText(1, _translate("InterfacesVlanEdit", "access"))
        self.mode.setItemText(2, _translate("InterfacesVlanEdit", "trunk"))
        self.exitBtn.setText(_translate("InterfacesVlanEdit", "Exit"))
        self.commitBtn.setText(_translate("InterfacesVlanEdit", "Commit"))
        self.dragAllRightBtn.setText(_translate("InterfacesVlanEdit", ">>"))
        self.dragAllLeftBtn.setText(_translate("InterfacesVlanEdit", "<<"))
